#!/bin/bash
# Create .desktop entry (v2)
# run xdesk --help for usage

function parse_option(){

	# Parses the opt value so to prevent issues with sed

	value="$1"
	lookup="/"
	new_value=""

	for (( i=0; i<${#value}; i++ )); do

		result="$(echo "$lookup" | grep -F "${value:i:1}")"
		if [[ -n "$result" ]]; then
			new_value+="\\${value:i:1}"
			continue
		fi
		new_value+="${value:i:1}"
	done

	echo "$new_value"
}

function show_help(){

	echo "Structure of command:"
	echo -e "\t\txdesk ACTION [OPTS] -f|--file FILE\n"
	echo -e "\t-f --file: target for the .desktop entry\n"
	echo "OPTS are:"
	echo -e "\t\t-h --help: display this help message"
	echo -e "\t\t-n --name: .desktop Name Key"
	echo -e "\t\t-e --exec: .desktop Exec Key"
	echo -e "\t\t-i --icon: .desktop Icon Key"
	echo -e "\t\t-T --terminal: sets Terminal key"
	echo -e "\t\t-t --type: .desktop Type Key"
	echo -e "\t\t-G --non-default-gpu: sets PrefersNonDefaultGPU key to false"
	echo -e "\t\t-c --categories: .desktop Categories Key"
	echo -e "\t\t-m --mimetype: .desktop MimeType Key"
	echo -e "\t\t-w --wmclass: .desktop StartupWMClass Key"
	echo -e "\t\t-d --dir: .desktop entry location\n"
	echo "ACTIONS are:"
	echo -e "\t\t--install: create a new .desktop entry"
	echo -e "\t\t--modify: modify existing entry"
	echo -e "\t\t--remove: remove entry"
	echo -e "\t\t--display: content of entry"
	echo -e "\t\t--list: entries in dir\n"
	echo "Defaults:"
	echo -e "\t\t--dir: $HOME/.local/share/applications"
	echo -e "\t\t--type: Application"
	echo -e "\t\t--non-default-gpu: true"
	echo -e "\t\t--exec: FILE"
	echo -e "\t\t--name: \${FILE%%.*} (FILE without extension)"

}


declare -A VARS      # utilities like install_dir, file etc
declare -A OPTS      # Stores option values.
declare -A GIVEN     # This tracks whether or not an option was given by the user
		     # in order to avoid changing options that were not given, 
		     # and are different in the file from the default values.

# Variables that will hold default values
VARS["INSTALL_DIR"]="$HOME/.local/share/applications"
OPTS["Type"]="Application"
OPTS["PrefersNonDefaultGPU"]="true"
OPTS["Exec"]=""
OPTS["Name"]=""

# Non-default, optional
OPTS["Categories"]=""
OPTS["MimeType"]=""
OPTS["StartupWMClass"]=""
OPTS["Icon"]=""

# Required
VARS["FILE"]=""

# Action
VARS["ACTION"]="INSTALL"

# Defining acceptable options/parameters and parsing arguments
TEMP=$(getopt \
	-o 'n:e:i:T:t:Gc:m:w:d:f:h' \
	-l 'install,modify,remove,display,list,help,file:,name:,exec:,icon:,terminal:,type:, \
	non-default-gpu,categories:,mimetype:,wmclass:,dir:' \
	-n "$0" -- "$@")

if [[ $? -ne 0 ]]; then
	echo "" >&2
	exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		"--install")
			VARS["ACTION"]="INSTALL"
			shift
			continue
			;;
		"--modify")
			VARS["ACTION"]="MODIFY"
			shift
			continue
			;;
		"--remove")
			VARS["ACTION"]="REMOVE"
			shift
			continue
			;;
		"--display")
			VARS["ACTION"]="DISPLAY"
			shift
			continue
			;;
		"--list")
			VARS["ACTION"]="LIST"
			shift
			continue
			;;
		"-h" | "--help")
			show_help
			exit 0
			;;
		"-f" | "--file")
			FILE="$(basename $2)"
			FILE="${FILE%%.*}"
			FILE="${FILE}.desktop"
			VARS["FILE"]="$FILE"
			unset FILE

			shift 2
			continue
			;;
		"-n" | "--name")
			OPTS["Name"]="$2"

			GIVEN["Name"]="true"

			shift 2
			continue
			;;
		"-e" | "--exec")
			OPTS["Exec"]="$2"

			GIVEN["Exec"]="true"

			shift 2
			continue
			;;
		"-i" | "--icon")
			OPTS["Icon"]="$2"

			GIVEN["Icon"]="true"
			
			shift 2
			continue
			;;
		"-T" | "--terminal")

			OPTS["Terminal"]="$2"
			GIVEN["Terminal"]="true"

			shift 2
			continue
			;;
		"-t" | "--type")
			OPTS["Type"]="$2"

			GIVEN["Type"]="true"
			
			shift 2
			continue
			;;
		"-G" | "--non-default-gpu")
			OPTS["PrefersNonDefaultGPU"]="false"

			GIVEN["PrefersNonDefaultGPU"]="true"
			
			shift
			continue
			;;
		"-c" | "--categories")
			OPTS["Categories"]="$2"
			
			GIVEN["Categories"]="true"

			shift 2
			continue
			;;
		"-m" | "--mimetype")
			OPTS["MimeType"]="$2"
			
			GIVEN["MimeType"]="true"

			shift 2
			continue
			;;
		"-w" | "--wmclass")
			OPTS["StartupWMClass"]="$2"
			
			GIVEN["StartupWMClass"]="true"

			shift 2
			continue
			;;
		"-d" | "--dir")
			VARS["INSTALL_DIR"]="$2"
			shift 2
			continue
			;;
		--)
			shift
			break
			;;
		*)
			echo "invalid arg $1"
			exit 1
			;;
	esac
done

VARS["FPATH"]="${VARS["INSTALL_DIR"]}/${VARS["FILE"]}"

if [[ "${VARS["ACTION"]}" = "INSTALL" ]]; then

	if [[ -f "${VARS["FPATH"]}" ]]; then
		echo "file exists. try --modify instead"
		exit 3
	fi

	if [[ "${OPTS["Name"]}" = "" ]]; then
		NAME="${VARS["FILE"]%%.*}"
		OPTS["Name"]="${NAME^}"
		unset NAME
	fi

	if [[ "${OPTS["Exec"]}" = "" ]]; then
		OPTS["Exec"]="$HOME/.local/bin/${VARS["FILE"]}"
		if ! [[ -f "${OPTS["Exec"]}" ]]; then
			echo "Executable for ${VARS["FILE"]} not located."
			echo "Please note if --exec is not given, it defaults to ~/.local/bin"
			echo "Cancelled."
			exit 4
		fi
	fi

	touch "${VARS["FPATH"]}"
	echo "[Desktop Entry]" > "${VARS["FPATH"]}"

	for key in "${!OPTS[@]}"; do
		echo "$key=${OPTS["$key"]}" >> "${VARS["FPATH"]}"
	done

	echo -e "\n#File generated by xdesk @ $(date)" >> "${VARS["FPATH"]}"

	echo "Successfully created entry ${VARS["FPATH"]}"

elif [[ "${VARS["ACTION"]}" = "MODIFY" ]]; then

	if ! [[ -f "${VARS["FPATH"]}" ]]; then
		echo "file does not exist. Try --install instead"
		exit 3
	fi

	for key in "${!GIVEN[@]}"; do

		if [[ -n "$(cat ${VARS["FPATH"]} | grep "$key")" ]]; then
			opt="$(parse_option "${OPTS["$key"]}")"
			sed -i -r "s/$key.*/$key=$opt/" "${VARS["FPATH"]}"
		else
			opt="${OPTS["$key"]}"
			echo "$key=$opt" >> "${VARS["FPATH"]}"
		fi

	done
	
	echo -e "\nSuccessfully modified entry ${VARS["FPATH"]}\n"
	cat "${VARS["FPATH"]}"


elif [[ "${VARS["ACTION"]}" = "REMOVE" ]]; then
	
	if [[ "${VARS["FILE"]: -8}" != ".desktop" ]]; then
		echo "Not a desktop entry"
		exit 3
	elif ! [[ -f "${VARS["FPATH"]}" ]]; then
		echo "File does not exist"
		exit 3
	else
		echo "Are you sure you want to remove ${VARS["FPATH"]}?"
		read -p "(y/N): " confirm
		
		# to lowercase and remove trailing/leading spaces
		confirm="${confirm,,}"
		confirm="$(echo $confirm | sed -e "s/^[[:space:]]*//" -e "s/[[:space:]]*$//")"

		if [[ ${confirm:0:1} = "y" ]]; then 
			rm "${VARS["FPATH"]}"
			echo "File ${VARS["FILE"]} has been removed"
			exit 0
		else
			echo "Operation cancelled"
			exit -1
		fi
	fi

elif [[ "${VARS["ACTION"]}" = "DISPLAY" ]]; then
	
	if [[ -f "${VARS["FPATH"]}" ]]; then
		cat "${VARS["FPATH"]}"
	else
		echo "File does not exist"
		exit 3
	fi

elif [[ "${VARS["ACTION"]}" = "LIST" ]]; then

	if [[ -d "${VARS["INSTALL_DIR"]}" ]]; then
		ls -A "${VARS["INSTALL_DIR"]}" | grep -i -n -T --color='never' ".*.desktop"
	else
		echo "Directory does not exist"
		exit 3
	fi

else
	echo "invalid option."
	show_help
	exit 1
fi



